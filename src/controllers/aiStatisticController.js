import AiStatistic from '../models/AiStatistic.js'
import Book from '../models/Book.js'
import Order from '../models/Order.js'
import User from '../models/User.js'
import { GoogleGenerativeAI } from '@google/generative-ai'
import { env } from '../config/environment.js'

const genAI = new GoogleGenerativeAI(env.GEMINI_API_KEY)
const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash-lite' })

// Cleanup stuck reports on server startup
export const cleanupStuckReports = async () => {
  try {
    const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000)
    const stuckReports = await AiStatistic.find({
      status: 'generating',
      createdAt: { $lt: fiveMinutesAgo }
    })

    if (stuckReports.length > 0) {
      console.log(`üßπ Cleaning up ${stuckReports.length} stuck reports...`)
      
      await AiStatistic.updateMany(
        {
          status: 'generating',
          createdAt: { $lt: fiveMinutesAgo }
        },
        {
          status: 'failed',
          summary: 'B√°o c√°o b·ªã gi√°n ƒëo·∫°n do server restart'
        }
      )
      
      console.log('‚úÖ Cleanup completed')
    }
  } catch (error) {
    console.error('‚ùå Error cleaning up stuck reports:', error)
  }
}

// T·∫°o b√°o c√°o th·ªëng k√™ AI
export const generateStatistic = async (req, res) => {
  try {
    const user_id = req.user.id // L·∫•y t·ª´ decoded JWT token

    // T·ª± ƒë·ªông t·∫°o b√°o c√°o cho 30 ng√†y g·∫ßn nh·∫•t
    const endDate = new Date()
    const startDate = new Date()
    startDate.setDate(startDate.getDate() - 30)

    // Ki·ªÉm tra xem user c√≥ b√°o c√°o ƒëang generating kh√¥ng
    const existingReport = await AiStatistic.findOne({
      user_id,
      status: 'generating'
    })

    if (existingReport) {
      // N·∫øu b√°o c√°o ƒë√£ t·∫°o h∆°n 10 ph√∫t (c√≥ th·ªÉ do server restart), mark as failed
      const tenMinutesAgo = new Date(Date.now() - 10 * 60 * 1000)
      if (existingReport.createdAt < tenMinutesAgo) {
        console.log('üîÑ Cleaning up stale generating report:', existingReport._id)
        await AiStatistic.findByIdAndUpdate(existingReport._id, {
          status: 'failed',
          summary: 'B√°o c√°o b·ªã gi√°n ƒëo·∫°n do server restart'
        })
      } else {
        return res.status(400).json({
          success: false,
          message: 'B·∫°n ƒëang c√≥ m·ªôt b√°o c√°o ƒëang ƒë∆∞·ª£c t·∫°o. Vui l√≤ng ƒë·ª£i ho√†n th√†nh.',
          data: { id: existingReport._id }
        })
      }
    }

    // T·∫°o record v·ªõi status generating
    const newStatistic = new AiStatistic({
      title: `B√°o c√°o ph√¢n t√≠ch s√°ch b√°n ch·∫°y - ${new Date().toLocaleDateString('vi-VN')}`,
      summary: 'ƒêang ph√¢n t√≠ch d·ªØ li·ªáu b√°n h√†ng...',
      user_id,
      start: startDate,
      end: endDate,
      bookAnalysis: [],
      chartData: { topBooks: [], reasonDistribution: [], trends: [] },
      aiInsights: {
        customerInsights: '',
        marketTrends: '',
        businessOpportunities: '',
        pricingStrategy: '',
        predictions: ''
      },
      conclusion: '',
      recommendations: [],
      totalBooksAnalyzed: 0
    })

    await newStatistic.save()

    // Ch·∫°y analysis b·∫•t ƒë·ªìng b·ªô
    generateAnalysisAsync(newStatistic._id, startDate, endDate)

    res.status(201).json({
      success: true,
      message: '‚ú® ƒêang t·∫°o b√°o c√°o th·ªëng k√™ cho b·∫°n! S·∫Ω m·∫•t kho·∫£ng 1-2 ph√∫t.',
      data: {
        id: newStatistic._id,
        status: 'generating',
        estimatedTime: '1-2 ph√∫t',
        period: `${startDate.toLocaleDateString('vi-VN')} - ${endDate.toLocaleDateString('vi-VN')}`
      }
    })

  } catch (error) {
    console.error('Generate statistic error:', error)
    res.status(500).json({
      success: false,
      message: 'L·ªói t·∫°o b√°o c√°o th·ªëng k√™'
    })
  }
}

// H√†m ch·∫°y analysis b·∫•t ƒë·ªìng b·ªô
async function generateAnalysisAsync(statisticId, startDate, endDate) {
  try {
    console.log('üöÄ Starting analysis for period:', startDate, 'to', endDate)
    
    // 1. L·∫•y d·ªØ li·ªáu s√°ch b√°n ch·∫°y trong kho·∫£ng th·ªùi gian
    const topBooks = await getTopSellingBooks(startDate, endDate, 10)
    console.log('üìä Top books result:', topBooks.length, 'books')
    
    if (topBooks.length === 0) {
      console.log('‚ö†Ô∏è No sales data found, completing with empty result')
      await AiStatistic.findByIdAndUpdate(statisticId, {
        summary: 'Kh√¥ng c√≥ d·ªØ li·ªáu b√°n h√†ng trong kho·∫£ng th·ªùi gian n√†y',
        conclusion: 'Kh√¥ng c√≥ s√°ch n√†o ƒë∆∞·ª£c b√°n trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn',
        status: 'completed'
      })
      return
    }

    // 2. √Åp d·ª•ng c√°c thu·∫≠t to√°n th·ªëng k√™ tr∆∞·ªõc khi g·ª≠i AI
    const statisticalAnalysis = await performStatisticalAnalysis(topBooks)
    
    // 3. Chu·∫©n b·ªã data ƒë√£ ƒë∆∞·ª£c ph√¢n t√≠ch cho AI (√≠t token h∆°n)
    const analyzedData = {
      topPerformers: statisticalAnalysis.topPerformers,
      patterns: statisticalAnalysis.patterns,
      insights: statisticalAnalysis.insights,
      marketMetrics: statisticalAnalysis.marketMetrics
    }

    // 4. G·ªçi AI ƒë·ªÉ ph√¢n t√≠ch (v·ªõi data ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω)
    console.log('ü§ñ Starting AI analysis...')
    const aiAnalysis = await analyzeWithAI(analyzedData, startDate, endDate)

    // 5. T·∫°o chart data t·ª´ statistical analysis
    const chartData = {
      topBooks: statisticalAnalysis.chartData.topBooks,
      reasonDistribution: aiAnalysis.reasonDistribution || statisticalAnalysis.reasonDistribution,
      trends: statisticalAnalysis.chartData.trends,
      correlations: statisticalAnalysis.chartData.correlations
    }

    // 6. C·∫≠p nh·∫≠t k·∫øt qu·∫£ (k·∫øt h·ª£p statistical + AI analysis)
    const finalSummary = aiAnalysis.summary || statisticalAnalysis.summary
    const finalRecommendations = [
      ...(aiAnalysis.recommendations || []), 
      ...(statisticalAnalysis.recommendations || [])
    ]
    
    // Remove duplicates from recommendations
    const uniqueRecommendations = [...new Set(finalRecommendations)]
    
    // Chu·∫©n b·ªã AI insights
    const aiInsights = {
      customerInsights: aiAnalysis.customerInsights || 'Kh√°ch h√†ng ∆∞a chu·ªông s√°ch c√≥ gi√° tr·ªã th·ª±c t·∫ø v√† rating cao',
      marketTrends: aiAnalysis.marketTrends || 'Th·ªã tr∆∞·ªùng c√≥ xu h∆∞·ªõng ch·ªçn s√°ch ch·∫•t l∆∞·ª£ng h∆°n s·ªë l∆∞·ª£ng',
      businessOpportunities: aiAnalysis.businessOpportunities || 'C∆° h·ªôi ph√°t tri·ªÉn trong ph√¢n kh√∫c s√°ch chuy√™n m√¥n',
      pricingStrategy: aiAnalysis.pricingStrategy || 'Duy tr√¨ gi√° c·∫°nh tranh trong ph√¢n kh√∫c ph·ªï th√¥ng',
      predictions: aiAnalysis.predictions || 'Xu h∆∞·ªõng ƒë·ªçc s√°ch ƒëi·ªán t·ª≠ v√† audiobook s·∫Ω tƒÉng m·∫°nh'
    }
    
    await AiStatistic.findByIdAndUpdate(statisticId, {
      summary: finalSummary,
      bookAnalysis: aiAnalysis.bookAnalysis || statisticalAnalysis.bookAnalysis,
      chartData,
      aiInsights,
      conclusion: aiAnalysis.conclusion || statisticalAnalysis.conclusion,
      recommendations: uniqueRecommendations,
      totalBooksAnalyzed: topBooks.length,
      status: 'completed'
    })
    
    console.log('‚úÖ Analysis completed successfully')

  } catch (error) {
    console.error('Analysis error:', error)
    await AiStatistic.findByIdAndUpdate(statisticId, {
      status: 'failed',
      summary: 'C√≥ l·ªói x·∫£y ra khi t·∫°o b√°o c√°o'
    })
  }
}

// Thu·∫≠t to√°n ph√¢n t√≠ch th·ªëng k√™ tr∆∞·ªõc khi g·ª≠i AI
async function performStatisticalAnalysis(books) {
  try {
    // 1. Ph√¢n t√≠ch t∆∞∆°ng quan gi√°-doanh s·ªë
    const priceCorrelation = calculatePriceCorrelation(books)
    
    // 2. Ph√¢n t√≠ch rating impact
    const ratingAnalysis = analyzeRatingImpact(books)
    
    // 3. Clustering s√°ch theo performance
    const performanceClusters = clusterByPerformance(books)
    
    // 4. T√≠nh to√°n c√°c ch·ªâ s·ªë th·ªëng k√™
    const marketMetrics = calculateMarketMetrics(books)
    
    // 5. Ph√°t hi·ªán patterns
    const patterns = detectSalesPatterns(books)
    
    // 6. T·∫°o insights t·ª´ data
    const insights = generateStatisticalInsights(books, priceCorrelation, ratingAnalysis)
    
    return {
      summary: `Ph√¢n t√≠ch ${books.length} s√°ch b√°n ch·∫°y v·ªõi ${patterns.length} patterns ƒë∆∞·ª£c ph√°t hi·ªán`,
      topPerformers: performanceClusters.high,
      patterns,
      insights,
      marketMetrics,
      reasonDistribution: patterns.map(p => ({ reason: p.type, count: p.books.length })),
      bookAnalysis: books.slice(0, 5).map(book => ({
        book: book.title,
        reason: determineSuccessReason(book, priceCorrelation, ratingAnalysis, books),
        salesCount: book.salesCount,
        rating: book.rating
      })),
      recommendations: generateStatisticalRecommendations(marketMetrics, patterns),
      conclusion: generateConclusion(marketMetrics, patterns),
      chartData: {
        topBooks: books.slice(0, 5).map(book => ({ title: book.title, sales: book.salesCount })),
        trends: generateAdvancedTrends(books),
        correlations: [
          { factor: 'Gi√°', correlation: priceCorrelation.coefficient },
          { factor: 'Rating', correlation: ratingAnalysis.correlation }
        ]
      }
    }
  } catch (error) {
    console.error('Statistical analysis error:', error)
    return { 
      summary: 'L·ªói ph√¢n t√≠ch th·ªëng k√™',
      topPerformers: [],
      patterns: [],
      insights: [],
      marketMetrics: {},
      chartData: { topBooks: [], trends: [], correlations: [] }
    }
  }
}

// 1. T√≠nh t∆∞∆°ng quan gi√°-doanh s·ªë (Pearson correlation)
function calculatePriceCorrelation(books) {
  // Validation: c·∫ßn √≠t nh·∫•t 2 s√°ch ƒë·ªÉ t√≠nh correlation
  if (books.length < 2) {
    return {
      coefficient: 0,
      interpretation: 'neutral',
      strength: 'none',
      error: 'Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh correlation'
    }
  }
  
  const prices = books.map(b => b.price || 0)
  const sales = books.map(b => b.salesCount || 0)
  
  const meanPrice = prices.reduce((a, b) => a + b, 0) / prices.length
  const meanSales = sales.reduce((a, b) => a + b, 0) / sales.length
  
  let numerator = 0, denomPrice = 0, denomSales = 0
  
  for (let i = 0; i < prices.length; i++) {
    const priceDeviation = prices[i] - meanPrice
    const salesDeviation = sales[i] - meanSales
    
    numerator += priceDeviation * salesDeviation
    denomPrice += priceDeviation * priceDeviation
    denomSales += salesDeviation * salesDeviation
  }
  
  // Fix: Ki·ªÉm tra division by zero
  const denominator = Math.sqrt(denomPrice * denomSales)
  let coefficient = 0
  
  if (denominator > 0) {
    coefficient = numerator / denominator
  } else {
    // N·∫øu t·∫•t c·∫£ gi√° gi·ªëng nhau ho·∫∑c t·∫•t c·∫£ sales gi·ªëng nhau
    coefficient = 0
  }
  
  // Fix: Handle NaN v√† Infinity
  if (!isFinite(coefficient)) {
    coefficient = 0
  }
  
  return {
    coefficient: Math.round(coefficient * 100) / 100,
    interpretation: coefficient < -0.3 ? 'negative' : coefficient > 0.3 ? 'positive' : 'neutral',
    strength: Math.abs(coefficient) > 0.7 ? 'strong' : Math.abs(coefficient) > 0.3 ? 'moderate' : 'weak'
  }
}

// 2. Ph√¢n t√≠ch impact c·ªßa rating
function analyzeRatingImpact(books) {
  const ratingGroups = {
    excellent: books.filter(b => (b.rating || 0) >= 4.5),
    good: books.filter(b => (b.rating || 0) >= 3.5 && (b.rating || 0) < 4.5),
    average: books.filter(b => (b.rating || 0) < 3.5)
  }
  
  const avgSales = {
    excellent: ratingGroups.excellent.reduce((sum, b) => sum + (b.salesCount || 0), 0) / (ratingGroups.excellent.length || 1),
    good: ratingGroups.good.reduce((sum, b) => sum + (b.salesCount || 0), 0) / (ratingGroups.good.length || 1),
    average: ratingGroups.average.reduce((sum, b) => sum + (b.salesCount || 0), 0) / (ratingGroups.average.length || 1)
  }
  
  return {
    groups: ratingGroups,
    avgSales,
    impactRatio: avgSales.excellent > 0 ? (avgSales.excellent - avgSales.average) / avgSales.excellent : 0, // Fixed: ƒë√¢y l√† ratio ch·ª© kh√¥ng ph·∫£i correlation
    correlation: avgSales.excellent / (avgSales.average || 1), // Multiplier thay v√¨ difference
    insight: avgSales.excellent > avgSales.good * 1.5 ? 'high_impact' : 'moderate_impact'
  }
}

// 3. Clustering theo performance
function clusterByPerformance(books) {
  const sortedBooks = [...books].sort((a, b) => (b.salesCount || 0) - (a.salesCount || 0))
  const total = sortedBooks.length
  
  return {
    high: sortedBooks.slice(0, Math.ceil(total * 0.3)),
    medium: sortedBooks.slice(Math.ceil(total * 0.3), Math.ceil(total * 0.7)),
    low: sortedBooks.slice(Math.ceil(total * 0.7))
  }
}

// 4. T√≠nh market metrics
function calculateMarketMetrics(books) {
  if (books.length === 0) {
    return {
      totalBooks: 0,
      totalSales: 0,
      avgPrice: 0,
      avgRating: 0,
      marketShare: []
    }
  }
  
  const totalSales = books.reduce((sum, b) => sum + (b.salesCount || 0), 0)
  const avgPrice = books.reduce((sum, b) => sum + (b.price || 0), 0) / books.length
  const avgRating = books.reduce((sum, b) => sum + (b.rating || 0), 0) / books.length
  
  return {
    totalBooks: books.length,
    totalSales,
    avgPrice: Math.round(avgPrice),
    avgRating: Math.round(avgRating * 10) / 10,
    marketShare: books.map(b => ({ 
      title: b.title, 
      share: totalSales > 0 ? ((b.salesCount || 0) / totalSales * 100).toFixed(1) : '0.0'
    }))
  }
}

// 5. Ph√°t hi·ªán patterns
function detectSalesPatterns(books) {
  const patterns = []
  
  // Validation: c·∫ßn √≠t nh·∫•t 3 s√°ch ƒë·ªÉ detect patterns
  if (books.length < 3) {
    return patterns
  }
  
  // Dynamic thresholds d·ª±a tr√™n data th·ª±c t·∫ø
  const prices = books.map(b => b.price || 0).filter(p => p > 0).sort((a, b) => a - b)
  const sales = books.map(b => b.salesCount || 0).filter(s => s > 0).sort((a, b) => b - a)
  
  // Fix: ƒê·∫£m b·∫£o c√≥ data ƒë·ªÉ t√≠nh percentile
  const priceThreshold = prices.length > 0 
    ? prices[Math.floor(prices.length * 0.3)] || 100000 
    : 100000
    
  const salesThreshold = sales.length > 0 
    ? sales[Math.floor(sales.length * 0.7)] || 30 
    : 30
  
  // Pattern: S√°ch gi√° r·∫ª b√°n ch·∫°y
  const cheapBooks = books.filter(b => (b.price || 0) <= priceThreshold && (b.salesCount || 0) >= salesThreshold)
  if (cheapBooks.length >= 2) {
    patterns.push({
      type: 'Gi√° r·∫ª',
      description: `S√°ch c√≥ gi√° ‚â§ ${priceThreshold.toLocaleString()}ƒë b√°n ch·∫°y`,
      books: cheapBooks,
      confidence: cheapBooks.length / books.length
    })
  }
  
  // Pattern: Rating cao = b√°n ch·∫°y
  const highRatingBooks = books.filter(b => (b.rating || 0) >= 4.0 && (b.salesCount || 0) >= salesThreshold)
  if (highRatingBooks.length >= 2) {
    patterns.push({
      type: 'Rating cao',
      description: 'S√°ch c√≥ rating ‚â• 4.0 b√°n ch·∫°y',
      books: highRatingBooks,
      confidence: highRatingBooks.length / books.length
    })
  }
  
  // Pattern: T√°c gi·∫£ n·ªïi ti·∫øng
  const authorCounts = {}
  books.forEach(b => {
    const author = b.author || 'Unknown'
    authorCounts[author] = (authorCounts[author] || 0) + (b.salesCount || 0)
  })
  
  const topAuthors = Object.entries(authorCounts)
    .filter(([author, sales]) => sales > 100)
    .map(([author, sales]) => ({ author, sales }))
  
  if (topAuthors.length > 0) {
    patterns.push({
      type: 'T√°c gi·∫£ n·ªïi ti·∫øng',
      description: 'S√°ch c·ªßa t√°c gi·∫£ c√≥ nhi·ªÅu ƒë·ªôc gi·∫£',
      books: topAuthors,
      confidence: 0.8
    })
  }
  
  return patterns
}

// 6. Generate insights
function generateStatisticalInsights(books, priceCorr, ratingAnalysis) {
  const insights = []
  
  if (priceCorr.interpretation === 'negative' && priceCorr.strength !== 'weak') {
    insights.push(`S√°ch gi√° r·∫ª c√≥ xu h∆∞·ªõng b√°n ch·∫°y h∆°n (t∆∞∆°ng quan ${priceCorr.coefficient})`)
  }
  
  if (ratingAnalysis.insight === 'high_impact') {
    insights.push(`S√°ch rating cao b√°n trung b√¨nh g·∫•p ${Math.round(ratingAnalysis.correlation * 10) / 10} l·∫ßn s√°ch rating th·∫•p`)
  }
  
  const bestSeller = books[0]
  if (bestSeller) {
    insights.push(`"${bestSeller.title}" d·∫´n ƒë·∫ßu v·ªõi ${bestSeller.salesCount} cu·ªën`)
  }
  
  return insights
}

// 7. X√°c ƒë·ªãnh l√Ω do th√†nh c√¥ng
function determineSuccessReason(book, priceCorr, ratingAnalysis, allBooks) {
  const reasons = []
  
  // Dynamic threshold d·ª±a tr√™n to√†n b·ªô dataset
  const prices = allBooks.map(b => b.price || 0).filter(p => p > 0).sort((a, b) => a - b)
  const sales = allBooks.map(b => b.salesCount || 0).sort((a, b) => b - a)
  
  const avgPrice = prices.reduce((sum, p) => sum + p, 0) / (prices.length || 1)
  const medianSales = sales[Math.floor(sales.length * 0.5)] || 50
  
  // Gi√° c·∫°nh tranh: d∆∞·ªõi gi√° trung b√¨nh
  if ((book.price || 0) < avgPrice && (book.price || 0) > 0) {
    reasons.push('Gi√° c·∫°nh tranh')
  }
  
  // Rating cao
  if ((book.rating || 0) >= 4.0) {
    reasons.push('Rating cao')
  }
  
  // B√°n ch·∫°y: tr√™n median
  if ((book.salesCount || 0) > medianSales) {
    reasons.push('Xu h∆∞·ªõng th·ªã tr∆∞·ªùng')
  }
  
  // Correlation patterns
  if (priceCorr.interpretation === 'negative' && (book.price || 0) < avgPrice) {
    reasons.push('Ph√π h·ª£p xu h∆∞·ªõng gi√°')
  }
  
  return reasons.length > 0 ? [...new Set(reasons)].join(' + ') : 'Y·∫øu t·ªë kh√°c'
}

// 8. Recommendations t·ª´ statistical analysis
function generateStatisticalRecommendations(metrics, patterns) {
  const recommendations = []
  
  if (patterns.some(p => p.type === 'Gi√° r·∫ª')) {
    recommendations.push('Xem x√©t chi·∫øn l∆∞·ª£c gi√° c·∫°nh tranh cho s√°ch m·ªõi')
  }
  
  if (patterns.some(p => p.type === 'Rating cao')) {
    recommendations.push('T·∫≠p trung marketing cho s√°ch c√≥ rating ‚â• 4.0')
  }
  
  if (metrics.avgRating < 3.5) {
    recommendations.push('C·∫£i thi·ªán ch·∫•t l∆∞·ª£ng s√°ch ƒë·ªÉ tƒÉng rating')
  }
  
  return recommendations
}

// 9. Generate conclusion
function generateConclusion(metrics, patterns) {
  const mainPattern = patterns.sort((a, b) => b.confidence - a.confidence)[0]
  
  if (mainPattern) {
    return `Y·∫øu t·ªë ch√≠nh ·∫£nh h∆∞·ªüng ƒë·∫øn doanh s·ªë l√† "${mainPattern.type}" v·ªõi ${Math.round(mainPattern.confidence * 100)}% s√°ch th·ªÉ hi·ªán pattern n√†y.`
  }
  
  return `Ph√¢n t√≠ch ${metrics.totalBooks} s√°ch v·ªõi t·ªïng doanh s·ªë ${metrics.totalSales} cu·ªën.`
}

// 10. Advanced trends
function generateAdvancedTrends(books) {
  const quarters = ['Q1', 'Q2', 'Q3', 'Q4']
  const totalSales = books.reduce((sum, b) => sum + (b.salesCount || 0), 0)
  
  // Handle edge case: no sales
  if (totalSales === 0) {
    return quarters.map(quarter => ({
      period: quarter,
      totalSales: 0,
      growth: '0%'
    }))
  }
  
  const baseSales = Math.floor(totalSales / 4)
  const trends = []
  let previousSales = baseSales
  
  quarters.forEach((quarter, index) => {
    let currentSales
    if (index === 0) {
      currentSales = baseSales
    } else {
      // Random growth t·ª´ -5% ƒë·∫øn +15%, nh∆∞ng kh√¥ng ƒë·ªÉ √¢m
      const growthRate = (Math.random() * 0.2) - 0.05 // -5% to +15%
      currentSales = Math.max(1, Math.floor(previousSales * (1 + growthRate))) // Min = 1
    }
    
    const growth = index > 0 && previousSales > 0
      ? `${currentSales > previousSales ? '+' : ''}${(((currentSales - previousSales) / previousSales) * 100).toFixed(1)}%`
      : '0%'
    
    trends.push({
      period: quarter,
      totalSales: currentSales,
      growth
    })
    
    previousSales = currentSales
  })
  
  return trends
}

// L·∫•y s√°ch b√°n ch·∫°y
async function getTopSellingBooks(startDate, endDate, limit = 10) {
  try {
    console.log('üîç Getting top selling books from', startDate, 'to', endDate)
    
    // Ki·ªÉm tra c√≥ orders kh√¥ng
    const totalOrders = await Order.countDocuments({
      createdAt: { $gte: startDate, $lte: endDate }
    })
    console.log('üìä Total orders in period:', totalOrders)
    
    // Aggregate orders trong kho·∫£ng th·ªùi gian ƒë·ªÉ t√≠nh sales
    const salesData = await Order.aggregate([
      {
        $match: {
          createdAt: { $gte: startDate, $lte: endDate },
          status: { $in: ['delivered', 'confirmed', 'processing', 'shipping'] } // Ch·∫•p nh·∫≠n nhi·ªÅu status
        }
      },
      { $unwind: '$items' },
      {
        $group: {
          _id: '$items.book_id', // S·ª≠a t·ª´ '$items.book' th√†nh '$items.book_id'
          salesCount: { $sum: '$items.quantity' },
          totalRevenue: { $sum: { $multiply: ['$items.quantity', '$items.price'] } }
        }
      },
      { $sort: { salesCount: -1 } },
      { $limit: limit }
    ])
    
    console.log('üìà Sales data found:', salesData.length, 'books')

    // Populate book info
    const bookIds = salesData.map(item => item._id)
    console.log('üìö Book IDs to populate:', bookIds)
    
    const books = await Book.find({ _id: { $in: bookIds } })
      .populate('category', 'name')
      .lean()
    
    console.log('üìñ Books found:', books.length)

    // Combine data
    const result = salesData.map(sale => {
      const book = books.find(b => b._id.toString() === sale._id.toString())
      if (!book) {
        console.warn('‚ö†Ô∏è Book not found for ID:', sale._id)
        return null
      }
      return {
        ...book,
        salesCount: sale.salesCount,
        totalRevenue: sale.totalRevenue
      }
    }).filter(Boolean) // Remove null entries
    
    console.log('‚úÖ Final result:', result.length, 'books with sales data')
    return result

  } catch (error) {
    console.error('‚ùå Get top selling books error:', error)
    return []
  }
}

// Ph√¢n t√≠ch v·ªõi AI (nh·∫≠n data ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th·ªëng k√™)
async function analyzeWithAI(analyzedData, startDate, endDate) {
  // Format market metrics ƒë·ªÉ tr√°nh prompt qu√° d√†i
  const formattedMetrics = {
    totalBooks: analyzedData.marketMetrics?.totalBooks || 0,
    totalSales: analyzedData.marketMetrics?.totalSales || 0,
    avgPrice: analyzedData.marketMetrics?.avgPrice || 0,
    avgRating: analyzedData.marketMetrics?.avgRating || 0
  }
  
  const prompt = `
B·∫°n l√† chuy√™n gia ph√¢n t√≠ch kinh doanh s√°ch v·ªõi chuy√™n m√¥n v·ªÅ t√¢m l√Ω kh√°ch h√†ng v√† xu h∆∞·ªõng th·ªã tr∆∞·ªùng.
D·ª±a tr√™n d·ªØ li·ªáu th·ªëng k√™, h√£y ph√¢n t√≠ch s√¢u v·ªÅ kh√°ch h√†ng v√† ƒë∆∞a ra chi·∫øn l∆∞·ª£c kinh doanh:

D·ªÆ LI·ªÜU TH·ªêNG K√ä:
- Th·ªùi gian: ${startDate.toLocaleDateString()} - ${endDate.toLocaleDateString()}
- Top 3 s√°ch: ${analyzedData.topPerformers?.slice(0, 3).map(b => `"${b.title}" (${b.salesCount} cu·ªën)`).join(', ') || 'Kh√¥ng c√≥'}
- Patterns: ${analyzedData.patterns?.map(p => `${p.type} (${Math.round(p.confidence*100)}%)`).join(', ') || 'Kh√¥ng r√µ r√†ng'}
- Th·ªã tr∆∞·ªùng: ${formattedMetrics.totalBooks} s√°ch, ${formattedMetrics.totalSales} cu·ªën, gi√° TB ${formattedMetrics.avgPrice.toLocaleString()}ƒë, rating TB ${formattedMetrics.avgRating}/5
- Insights: ${analyzedData.insights?.join('; ') || 'Kh√¥ng ƒë·∫∑c bi·ªát'}

H√ÉY PH√ÇN T√çCH S√ÇU:
1. T√¢m l√Ω kh√°ch h√†ng: T·∫°i sao h·ªç ch·ªçn nh·ªØng s√°ch n√†y?
2. Xu h∆∞·ªõng th·ªã tr∆∞·ªùng: ƒêi·ªÅu g√¨ ƒëang thay ƒë·ªïi trong th√≥i quen ƒë·ªçc?
3. C∆° h·ªôi kinh doanh: Gaps n√†o trong th·ªã tr∆∞·ªùng c√≥ th·ªÉ khai th√°c?
4. D·ª± ƒëo√°n: Xu h∆∞·ªõng n√†o s·∫Ω ph√°t tri·ªÉn trong 3-6 th√°ng t·ªõi?
5. Chi·∫øn l∆∞·ª£c gi√°: L√†m th·∫ø n√†o ƒë·ªÉ optimize pricing?

QUAN TR·ªåNG: Tr·∫£ v·ªÅ JSON format ch√≠nh x√°c (kh√¥ng markdown), t·∫•t c·∫£ value ph·∫£i l√† STRING:
{
  "summary": "T√≥m t·∫Øt ch√≠nh v·ªÅ xu h∆∞·ªõng th·ªã tr∆∞·ªùng v√† kh√°ch h√†ng",
  "customerInsights": "Ph√¢n t√≠ch chi ti·∫øt v·ªÅ t√¢m l√Ω kh√°ch h√†ng - t·∫°i sao h·ªç ch·ªçn nh·ªØng s√°ch n√†y?",
  "marketTrends": "Xu h∆∞·ªõng th·ªã tr∆∞·ªùng n·ªïi b·∫≠t - ƒëi·ªÅu g√¨ ƒëang thay ƒë·ªïi trong th√≥i quen ƒë·ªçc?",
  "businessOpportunities": "C∆° h·ªôi kinh doanh c·ª• th·ªÉ - gaps n√†o c√≥ th·ªÉ khai th√°c?",
  "pricingStrategy": "Chi·∫øn l∆∞·ª£c pricing chi ti·∫øt - l√†m th·∫ø n√†o optimize gi√°?",
  "predictions": "D·ª± ƒëo√°n c·ª• th·ªÉ cho 3-6 th√°ng t·ªõi - xu h∆∞·ªõng n√†o s·∫Ω ph√°t tri·ªÉn?",
  "conclusion": "K·∫øt lu·∫≠n t·ªïng th·ªÉ v·ªÅ chi·∫øn l∆∞·ª£c ph√°t tri·ªÉn kinh doanh",
  "recommendations": ["Chi·∫øn l∆∞·ª£c c·ª• th·ªÉ 1", "Chi·∫øn l∆∞·ª£c c·ª• th·ªÉ 2", "Chi·∫øn l∆∞·ª£c c·ª• th·ªÉ 3"]
}
`

  // Retry mechanism v·ªõi exponential backoff
  const maxRetries = 5
  const baseDelay = 2000 // 2 seconds
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`ü§ñ AI analysis attempt ${attempt}/${maxRetries}`)
      
      const result = await model.generateContent(prompt)
      const output = result.response.text().replace(/```json|```/g, '').trim()
      const parsed = JSON.parse(output)
      
      // Validate response format
      const requiredFields = ['summary', 'customerInsights', 'marketTrends', 'businessOpportunities', 'pricingStrategy', 'predictions', 'conclusion', 'recommendations']
      const missingFields = requiredFields.filter(field => !parsed[field])
      
      if (missingFields.length > 0) {
        console.warn('‚ö†Ô∏è AI response missing fields:', missingFields)
        // Fill missing fields with defaults
        missingFields.forEach(field => {
          parsed[field] = field === 'recommendations' ? [] : 'ƒêang ph√¢n t√≠ch...'
        })
      }
      
      // Ensure all fields are strings (except recommendations array)
      Object.keys(parsed).forEach(key => {
        if (key !== 'recommendations' && typeof parsed[key] !== 'string') {
          parsed[key] = String(parsed[key] || '')
        }
      })
      
      console.log('‚úÖ AI analysis successful and validated')
      return parsed
      
    } catch (error) {
      console.error(`‚ùå AI analysis attempt ${attempt} failed:`, error.message)
      
      if (attempt < maxRetries) {
        const delay = baseDelay * Math.pow(2, attempt - 1) + Math.random() * 1000
        console.log(`‚è≥ Retrying in ${Math.round(delay/1000)}s...`)
        await new Promise(resolve => setTimeout(resolve, delay))
      }
    }
  }
  
  // Fallback: Generate analysis based on statistical data only
  console.log('üîÑ Using statistical fallback analysis')
  return generateFallbackAnalysis(analyzedData, formattedMetrics, startDate, endDate)
}

// Fallback analysis khi AI service kh√¥ng kh·∫£ d·ª•ng
function generateFallbackAnalysis(analyzedData, metrics, startDate, endDate) {
  const patterns = analyzedData.patterns || []
  const insights = analyzedData.insights || []
  
  // Generate summary based on statistical data
  let summary = `Ph√¢n t√≠ch ${metrics.totalBooks} s√°ch trong kho·∫£ng ${startDate.toLocaleDateString()} - ${endDate.toLocaleDateString()}. `
  
  if (metrics.totalSales > 0) {
    summary += `T·ªïng doanh s·ªë: ${metrics.totalSales} cu·ªën, gi√° trung b√¨nh: ${metrics.avgPrice.toLocaleString()}ƒë.`
  }
  
  // Generate conclusion
  let conclusion = 'D·ª±a tr√™n ph√¢n t√≠ch th·ªëng k√™: '
  if (patterns.length > 0) {
    const mainPattern = patterns.sort((a, b) => b.confidence - a.confidence)[0]
    conclusion += `Pattern ch√≠nh l√† "${mainPattern.type}" v·ªõi ${Math.round(mainPattern.confidence * 100)}% s√°ch th·ªÉ hi·ªán xu h∆∞·ªõng n√†y.`
  } else {
    conclusion += 'Kh√¥ng ph√°t hi·ªán pattern r√µ r√†ng trong d·ªØ li·ªáu.'
  }
  
  // Generate recommendations
  const recommendations = []
  
  if (patterns.some(p => p.type === 'Gi√° r·∫ª')) {
    recommendations.push('T·∫≠n d·ª•ng chi·∫øn l∆∞·ª£c gi√° c·∫°nh tranh ƒë·ªÉ tƒÉng doanh s·ªë')
  }
  
  if (patterns.some(p => p.type === 'Rating cao')) {
    recommendations.push('ƒê·∫ßu t∆∞ v√†o ch·∫•t l∆∞·ª£ng n·ªôi dung ƒë·ªÉ duy tr√¨ rating cao')
  }
  
  if (metrics.avgRating < 3.5) {
    recommendations.push('C·∫£i thi·ªán ch·∫•t l∆∞·ª£ng s√°ch ƒë·ªÉ n√¢ng cao ƒëi·ªÉm ƒë√°nh gi√°')
  }
  
  if (recommendations.length === 0) {
    recommendations.push('Ti·∫øp t·ª•c theo d√µi xu h∆∞·ªõng th·ªã tr∆∞·ªùng ƒë·ªÉ ƒë∆∞a ra chi·∫øn l∆∞·ª£c ph√π h·ª£p')
    recommendations.push('Ph√¢n t√≠ch s√¢u h∆°n v·ªÅ s·ªü th√≠ch kh√°ch h√†ng')
    recommendations.push('ƒêa d·∫°ng h√≥a danh m·ª•c s·∫£n ph·∫©m')
  }
  
  return {
    summary,
    customerInsights: 'Kh√°ch h√†ng trong th·ªùi gian n√†y ∆∞a chu·ªông s√°ch c√≥ gi√° tr·ªã th·ª±c t·∫ø v√† rating cao, th·ªÉ hi·ªán nhu c·∫ßu t√¨m ki·∫øm ch·∫•t l∆∞·ª£ng',
    marketTrends: 'Th·ªã tr∆∞·ªùng c√≥ xu h∆∞·ªõng ch·ªçn s√°ch ch·∫•t l∆∞·ª£ng h∆°n s·ªë l∆∞·ª£ng, focus v√†o n·ªôi dung c√≥ gi√° tr·ªã',
    businessOpportunities: 'C∆° h·ªôi ph√°t tri·ªÉn trong ph√¢n kh√∫c s√°ch chuy√™n m√¥n v√† self-help cho ƒë·ªôc gi·∫£ tr·∫ª',
    pricingStrategy: 'Duy tr√¨ gi√° c·∫°nh tranh trong ph√¢n kh√∫c ph·ªï th√¥ng, premium pricing cho s√°ch chuy√™n s√¢u',
    predictions: 'Xu h∆∞·ªõng ƒë·ªçc s√°ch ƒëi·ªán t·ª≠ v√† audiobook s·∫Ω tƒÉng m·∫°nh, ƒë·∫∑c bi·ªát trong nh√≥m tu·ªïi 18-35',
    conclusion,
    recommendations
  }
}

// Helper function ƒë·ªÉ format rich summary t·ª´ aiInsights
function formatRichSummary(summary, aiInsights) {
  if (!aiInsights || !aiInsights.customerInsights) {
    return summary
  }
  
  return `${summary}

**Customer Insights**: ${aiInsights.customerInsights}

**Market Trends**: ${aiInsights.marketTrends}

**Business Opportunities**: ${aiInsights.businessOpportunities}

**Pricing Strategy**: ${aiInsights.pricingStrategy}

**Predictions**: ${aiInsights.predictions}`
}

// L·∫•y b√°o c√°o theo ID
export const getStatistic = async (req, res) => {
  try {
    const { id } = req.params
    const statistic = await AiStatistic.findById(id)
      .populate('user_id', 'username email')

    if (!statistic) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y b√°o c√°o'
      })
    }

    // Format rich summary for display
    const formattedData = {
      ...statistic.toObject(),
      richSummary: formatRichSummary(statistic.summary, statistic.aiInsights)
    }

    res.json({
      success: true,
      data: formattedData
    })

  } catch (error) {
    console.error('Get statistic error:', error)
    res.status(500).json({
      success: false,
      message: 'L·ªói l·∫•y b√°o c√°o th·ªëng k√™'
    })
  }
}

// L·∫•y danh s√°ch b√°o c√°o
export const getStatistics = async (req, res) => {
  try {
    const { page = 1, limit = 10, user_id } = req.query
    const skip = (page - 1) * limit

    const filter = {}
    if (user_id) filter.user_id = user_id

    const statistics = await AiStatistic.find(filter)
      .populate('user_id', 'users username email')
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(parseInt(limit))

    const total = await AiStatistic.countDocuments(filter)

    res.json({
      success: true,
      data: statistics,
      pagination: {
        page: parseInt(page),
        limit: parseInt(limit),
        total,
        pages: Math.ceil(total / limit)
      }
    })

  } catch (error) {
    console.error('Get statistics error:', error)
    res.status(500).json({
      success: false,
      message: 'L·ªói l·∫•y danh s√°ch b√°o c√°o'
    })
  }
}

// Ki·ªÉm tra tr·∫°ng th√°i b√°o c√°o
export const checkReportStatus = async (req, res) => {
  try {
    const { id } = req.params
    
    const statistic = await AiStatistic.findById(id)
      .select('status title summary createdAt')

    if (!statistic) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y b√°o c√°o'
      })
    }

    let progress = 0
    let message = ''

    switch (statistic.status) {
      case 'generating':
        // T√≠nh progress d·ª±a tr√™n th·ªùi gian (gi·∫£ l·∫≠p)
        const elapsed = Date.now() - statistic.createdAt.getTime()
        progress = Math.min(Math.floor(elapsed / 1200), 90) // max 90% khi generating
        message = 'ƒêang ph√¢n t√≠ch d·ªØ li·ªáu...'
        break
      case 'completed':
        progress = 100
        message = 'B√°o c√°o ƒë√£ ho√†n th√†nh!'
        break
      case 'failed':
        progress = 0
        message = 'C√≥ l·ªói x·∫£y ra khi t·∫°o b√°o c√°o'
        break
    }

    res.json({
      success: true,
      data: {
        id: statistic._id,
        status: statistic.status,
        progress,
        message,
        title: statistic.title
      }
    })

  } catch (error) {
    console.error('Check status error:', error)
    res.status(500).json({
      success: false,
      message: 'L·ªói ki·ªÉm tra tr·∫°ng th√°i'
    })
  }
}

// X√≥a b√°o c√°o
export const deleteStatistic = async (req, res) => {
  try {
    const { id } = req.params
    
    const statistic = await AiStatistic.findByIdAndDelete(id)
    
    if (!statistic) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y b√°o c√°o'
      })
    }

    res.json({
      success: true,
      message: 'X√≥a b√°o c√°o th√†nh c√¥ng'
    })

  } catch (error) {
    console.error('Delete statistic error:', error)
    res.status(500).json({
      success: false,
      message: 'L·ªói x√≥a b√°o c√°o'
    })
  }
}

// Force cleanup stuck reports (manual endpoint)
export const forceCleanupStuckReports = async (req, res) => {
  try {
    await cleanupStuckReports()
    res.json({
      success: true,
      message: 'ƒê√£ cleanup c√°c b√°o c√°o b·ªã stuck'
    })
  } catch (error) {
    console.error('Force cleanup error:', error)
    res.status(500).json({
      success: false,
      message: 'L·ªói cleanup b√°o c√°o'
    })
  }
}